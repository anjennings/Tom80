
EEPROM Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000438  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000438  000004ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001aaf  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c4d  00000000  00000000  0000213f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b78  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000294  00000000  00000000  00003904  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f7  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b0c  00000000  00000000  0000428f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004d9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1a 02 	jmp	0x434	; 0x434 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

char snum[8];

int main(void){
	
	USART_init();
  92:	0e 94 c6 01 	call	0x38c	; 0x38c <_Z10USART_initv>
	
	//Just in case
	disableSoftwareProtection();
  96:	0e 94 51 01 	call	0x2a2	; 0x2a2 <_Z25disableSoftwareProtectionv>
	
	while(1){
		monitor();
  9a:	0e 94 c0 00 	call	0x180	; 0x180 <_Z7monitorv>
  9e:	fd cf       	rjmp	.-6      	; 0x9a <main+0x8>

000000a0 <_Z4dumpv>:
			USART_print("\rError\n");
			break;
	}
}

void dump(){
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	28 97       	sbiw	r28, 0x08	; 8
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
	
	USART_print("\rReading from EEPROM...\n");
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
	
	char snum[8];
	
	for(uint16_t j = 0; j < 0x100; j++){
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	10 e0       	ldi	r17, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  c4:	40 e1       	ldi	r20, 0x10	; 16
  c6:	be 01       	movw	r22, r28
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	c8 01       	movw	r24, r16
  ce:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__itoa_ncheck>
		
		itoa(j, snum, 16);
		USART_print("\r0x");
  d2:	89 e7       	ldi	r24, 0x79	; 121
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
		USART_print(snum);
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
		USART_print(" : 0x");
  e2:	8d e7       	ldi	r24, 0x7D	; 125
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
		
		itoa(readData(j), snum, 16);
  ea:	c8 01       	movw	r24, r16
  ec:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z8readDataj>
  f0:	40 e1       	ldi	r20, 0x10	; 16
  f2:	be 01       	movw	r22, r28
  f4:	6f 5f       	subi	r22, 0xFF	; 255
  f6:	7f 4f       	sbci	r23, 0xFF	; 255
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__itoa_ncheck>
		USART_print(snum);
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
		USART_print("\n");
 106:	8b e8       	ldi	r24, 0x8B	; 139
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
	
	USART_print("\rReading from EEPROM...\n");
	
	char snum[8];
	
	for(uint16_t j = 0; j < 0x100; j++){
 10e:	0f 5f       	subi	r16, 0xFF	; 255
 110:	1f 4f       	sbci	r17, 0xFF	; 255
 112:	01 15       	cp	r16, r1
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	18 07       	cpc	r17, r24
 118:	a9 f6       	brne	.-86     	; 0xc4 <_Z4dumpv+0x24>
		USART_print("\n");
		
	}
	
	//Finished
	USART_print("\rDone!\r\n\n");
 11a:	83 e8       	ldi	r24, 0x83	; 131
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
	
 122:	28 96       	adiw	r28, 0x08	; 8
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <_Z18evaluateExpressionPc>:
	//	evaluateExpression(USART_receive());
	//	_delay_ms(100);
	}
}

void evaluateExpression(char *i){
 138:	fc 01       	movw	r30, r24
	
	char inst = *i;
	uint8_t addr_l = ( (uint8_t)(*(i+2)) );
	uint8_t addr_h = ( (uint8_t)(*(i+1)) );
	uint16_t addr = addr_h;
	addr = ((addr<<8) | addr_l);
 13a:	61 81       	ldd	r22, Z+1	; 0x01
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	76 2f       	mov	r23, r22
 140:	66 27       	eor	r22, r22
 142:	82 81       	ldd	r24, Z+2	; 0x02
 144:	68 2b       	or	r22, r24
	uint8_t data = (*(i+3));
	
	switch(inst){
 146:	80 81       	ld	r24, Z
 148:	82 37       	cpi	r24, 0x72	; 114
 14a:	61 f0       	breq	.+24     	; 0x164 <_Z18evaluateExpressionPc+0x2c>
 14c:	87 37       	cpi	r24, 0x77	; 119
 14e:	19 f0       	breq	.+6      	; 0x156 <_Z18evaluateExpressionPc+0x1e>
 150:	81 36       	cpi	r24, 0x61	; 97
 152:	89 f4       	brne	.+34     	; 0x176 <_Z18evaluateExpressionPc+0x3e>
 154:	0d c0       	rjmp	.+26     	; 0x170 <_Z18evaluateExpressionPc+0x38>
		case i_WRITE : 
			writeData(data, addr);
 156:	83 81       	ldd	r24, Z+3	; 0x03
 158:	0e 94 06 01 	call	0x20c	; 0x20c <_Z9writeDatahj>
			USART_send('0');
 15c:	80 e3       	ldi	r24, 0x30	; 48
 15e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z10USART_sendh>
			break;
 162:	08 95       	ret
		case i_READ : 
			USART_send(readData(addr));
 164:	cb 01       	movw	r24, r22
 166:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z8readDataj>
 16a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z10USART_sendh>
			break;
 16e:	08 95       	ret
		case i_DUMP :
			dump();
 170:	0e 94 50 00 	call	0xa0	; 0xa0 <_Z4dumpv>
			break;
 174:	08 95       	ret
		default :
			USART_print("\rError\n");
 176:	8d e8       	ldi	r24, 0x8D	; 141
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_Z11USART_printPc>
 17e:	08 95       	ret

00000180 <_Z7monitorv>:
	0 : Instruction
	1 : Address High
	2 : Address Low
	3 : Data (if write instruction)
*/
void monitor(){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <_Z7monitorv+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <_Z7monitorv+0x8>
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	
	char iB[4];
	uint8_t bP = 0;
 18c:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1){
		
		*(iB + bP) = USART_receive();
 18e:	0e 94 ce 01 	call	0x39c	; 0x39c <_Z13USART_receivev>
 192:	e1 e0       	ldi	r30, 0x01	; 1
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	ec 0f       	add	r30, r28
 198:	fd 1f       	adc	r31, r29
 19a:	e1 0f       	add	r30, r17
 19c:	f1 1d       	adc	r31, r1
 19e:	80 83       	st	Z, r24

		if(bP == 3){
 1a0:	13 30       	cpi	r17, 0x03	; 3
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <_Z7monitorv+0x30>
			evaluateExpression(iB);
 1a4:	ce 01       	movw	r24, r28
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	0e 94 9c 00 	call	0x138	; 0x138 <_Z18evaluateExpressionPc>
			bP = 0;
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	ef cf       	rjmp	.-34     	; 0x18e <_Z7monitorv+0xe>
		}else{
			bP++;
 1b0:	1f 5f       	subi	r17, 0xFF	; 255
 1b2:	ed cf       	rjmp	.-38     	; 0x18e <_Z7monitorv+0xe>

000001b4 <_Z12enableEEPROMv>:
	setControl();

	//Put all control pins in a known state
	disableEEPROM();
	disableWrite();
	disableOutput();
 1b4:	97 98       	cbi	0x12, 7	; 18
 1b6:	08 95       	ret

000001b8 <_Z13disableEEPROMv>:
 1b8:	97 9a       	sbi	0x12, 7	; 18
 1ba:	08 95       	ret

000001bc <_Z11enableWritev>:
 1bc:	96 98       	cbi	0x12, 6	; 18
 1be:	08 95       	ret

000001c0 <_Z12disableWritev>:
 1c0:	96 9a       	sbi	0x12, 6	; 18
 1c2:	08 95       	ret

000001c4 <_Z12enableOutputv>:
 1c4:	95 98       	cbi	0x12, 5	; 18
 1c6:	08 95       	ret

000001c8 <_Z13disableOutputv>:
 1c8:	95 9a       	sbi	0x12, 5	; 18
 1ca:	08 95       	ret

000001cc <_Z5flushv>:
 1cc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z13disableEEPROMv>
 1d0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z12disableWritev>
 1d4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z13disableOutputv>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	8a bb       	out	0x1a, r24	; 26
 1dc:	87 bb       	out	0x17, r24	; 23
 1de:	84 bb       	out	0x14, r24	; 20
 1e0:	1b ba       	out	0x1b, r1	; 27
 1e2:	18 ba       	out	0x18, r1	; 24
 1e4:	15 ba       	out	0x15, r1	; 21
 1e6:	08 95       	ret

000001e8 <_Z10setControlv>:
 1e8:	81 b3       	in	r24, 0x11	; 17
 1ea:	80 6e       	ori	r24, 0xE0	; 224
 1ec:	81 bb       	out	0x11, r24	; 17
 1ee:	08 95       	ret

000001f0 <_Z7getDatav>:
 1f0:	1a ba       	out	0x1a, r1	; 26
 1f2:	86 e6       	ldi	r24, 0x66	; 102
 1f4:	9e e0       	ldi	r25, 0x0E	; 14
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <_Z7getDatav+0x6>
 1fa:	00 00       	nop
 1fc:	89 b3       	in	r24, 0x19	; 25
 1fe:	08 95       	ret

00000200 <_Z11setAddresssj>:
 200:	2f ef       	ldi	r18, 0xFF	; 255
 202:	27 bb       	out	0x17, r18	; 23
 204:	24 bb       	out	0x14, r18	; 20
 206:	95 bb       	out	0x15, r25	; 21
 208:	88 bb       	out	0x18, r24	; 24
 20a:	08 95       	ret

0000020c <_Z9writeDatahj>:
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	c8 2f       	mov	r28, r24
 214:	8b 01       	movw	r16, r22
 216:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z10setControlv>
 21a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
 21e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z13disableOutputv>
 222:	c8 01       	movw	r24, r16
 224:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
 228:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
 22c:	83 e3       	ldi	r24, 0x33	; 51
 22e:	93 e7       	ldi	r25, 0x73	; 115
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <_Z9writeDatahj+0x24>
 234:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11enableWritev>
 238:	8f ef       	ldi	r24, 0xFF	; 255
 23a:	8a bb       	out	0x1a, r24	; 26
 23c:	cb bb       	out	0x1b, r28	; 27
 23e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z12disableWritev>
 242:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z13disableEEPROMv>
 246:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
 24a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z13disableEEPROMv>
 24e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z13disableOutputv>
 252:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z12disableWritev>
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <_Z8readDataj>:
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
 268:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <_Z12enableOutputv>
 26c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
 270:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z12disableWritev>
 274:	ce 01       	movw	r24, r28
 276:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
 27a:	86 e6       	ldi	r24, 0x66	; 102
 27c:	9e e0       	ldi	r25, 0x0E	; 14
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <_Z8readDataj+0x20>
 282:	00 00       	nop
 284:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <_Z7getDatav>
 288:	c8 2f       	mov	r28, r24
 28a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <_Z13disableEEPROMv>
 28e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_Z13disableOutputv>
 292:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <_Z12disableWritev>
 296:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
 29a:	8c 2f       	mov	r24, r28
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <_Z25disableSoftwareProtectionv>:
}

//Disables write protection on chips, only needs to be done once
void disableSoftwareProtection(){
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
	
	setControl();
 2a8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z10setControlv>
	//flush disables all controls
	
	//Step 1
	flush();
 2ac:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
	setAddresss(0x5555);
 2b0:	85 e5       	ldi	r24, 0x55	; 85
 2b2:	95 e5       	ldi	r25, 0x55	; 85
 2b4:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
	ADDR_L = (uint8_t)(a & 0xff);
}

//Set Port A to be a data value
void setData(uint8_t d){
	DDRA = 0xff;
 2b8:	cf ef       	ldi	r28, 0xFF	; 255
 2ba:	ca bb       	out	0x1a, r28	; 26
	DATA = d;
 2bc:	1a ea       	ldi	r17, 0xAA	; 170
 2be:	1b bb       	out	0x1b, r17	; 27
	
	//Step 1
	flush();
	setAddresss(0x5555);
	setData(0xAA);
	enableEEPROM();
 2c0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
	enableWrite();
 2c4:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11enableWritev>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	86 e6       	ldi	r24, 0x66	; 102
 2ca:	9e e0       	ldi	r25, 0x0E	; 14
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <_Z25disableSoftwareProtectionv+0x2a>
 2d0:	00 00       	nop
	_delay_ms(1);
	
	//Step 2
	flush();
 2d2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
	setAddresss(0x2AAA);
 2d6:	8a ea       	ldi	r24, 0xAA	; 170
 2d8:	9a e2       	ldi	r25, 0x2A	; 42
 2da:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
	ADDR_L = (uint8_t)(a & 0xff);
}

//Set Port A to be a data value
void setData(uint8_t d){
	DDRA = 0xff;
 2de:	ca bb       	out	0x1a, r28	; 26
	DATA = d;
 2e0:	d5 e5       	ldi	r29, 0x55	; 85
 2e2:	db bb       	out	0x1b, r29	; 27
	
	//Step 2
	flush();
	setAddresss(0x2AAA);
	setData(0x55);
	enableEEPROM();
 2e4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
	enableWrite();
 2e8:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11enableWritev>
 2ec:	86 e6       	ldi	r24, 0x66	; 102
 2ee:	9e e0       	ldi	r25, 0x0E	; 14
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <_Z25disableSoftwareProtectionv+0x4e>
 2f4:	00 00       	nop
	_delay_ms(1);
	
	//Step 3
	flush();
 2f6:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
	setAddresss(0x5555);
 2fa:	85 e5       	ldi	r24, 0x55	; 85
 2fc:	95 e5       	ldi	r25, 0x55	; 85
 2fe:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
	ADDR_L = (uint8_t)(a & 0xff);
}

//Set Port A to be a data value
void setData(uint8_t d){
	DDRA = 0xff;
 302:	ca bb       	out	0x1a, r28	; 26
	DATA = d;
 304:	80 e8       	ldi	r24, 0x80	; 128
 306:	8b bb       	out	0x1b, r24	; 27
	
	//Step 3
	flush();
	setAddresss(0x5555);
	setData(0x80);
	enableEEPROM();
 308:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
	enableWrite();
 30c:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11enableWritev>
 310:	86 e6       	ldi	r24, 0x66	; 102
 312:	9e e0       	ldi	r25, 0x0E	; 14
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <_Z25disableSoftwareProtectionv+0x72>
 318:	00 00       	nop
	_delay_ms(1);
	
	//Step 4
	flush();
 31a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
	setAddresss(0x5555);
 31e:	85 e5       	ldi	r24, 0x55	; 85
 320:	95 e5       	ldi	r25, 0x55	; 85
 322:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
	ADDR_L = (uint8_t)(a & 0xff);
}

//Set Port A to be a data value
void setData(uint8_t d){
	DDRA = 0xff;
 326:	ca bb       	out	0x1a, r28	; 26
	DATA = d;
 328:	1b bb       	out	0x1b, r17	; 27
	
	//Step 4
	flush();
	setAddresss(0x5555);
	setData(0xAA);
	enableEEPROM();
 32a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
	enableWrite();
 32e:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11enableWritev>
 332:	86 e6       	ldi	r24, 0x66	; 102
 334:	9e e0       	ldi	r25, 0x0E	; 14
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <_Z25disableSoftwareProtectionv+0x94>
 33a:	00 00       	nop
	_delay_ms(1);
	
	//Step 5
	flush();
 33c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
	setAddresss(0x2AAA);
 340:	8a ea       	ldi	r24, 0xAA	; 170
 342:	9a e2       	ldi	r25, 0x2A	; 42
 344:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
	ADDR_L = (uint8_t)(a & 0xff);
}

//Set Port A to be a data value
void setData(uint8_t d){
	DDRA = 0xff;
 348:	ca bb       	out	0x1a, r28	; 26
	DATA = d;
 34a:	db bb       	out	0x1b, r29	; 27
	
	//Step 5
	flush();
	setAddresss(0x2AAA);
	setData(0x55);
	enableEEPROM();
 34c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
	enableWrite();
 350:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11enableWritev>
 354:	86 e6       	ldi	r24, 0x66	; 102
 356:	9e e0       	ldi	r25, 0x0E	; 14
 358:	01 97       	sbiw	r24, 0x01	; 1
 35a:	f1 f7       	brne	.-4      	; 0x358 <_Z25disableSoftwareProtectionv+0xb6>
 35c:	00 00       	nop
	_delay_ms(1);
	
	//Step 6
	flush();
 35e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <_Z5flushv>
	setAddresss(0x5555);
 362:	85 e5       	ldi	r24, 0x55	; 85
 364:	95 e5       	ldi	r25, 0x55	; 85
 366:	0e 94 00 01 	call	0x200	; 0x200 <_Z11setAddresssj>
	ADDR_L = (uint8_t)(a & 0xff);
}

//Set Port A to be a data value
void setData(uint8_t d){
	DDRA = 0xff;
 36a:	ca bb       	out	0x1a, r28	; 26
	DATA = d;
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	8b bb       	out	0x1b, r24	; 27
	
	//Step 6
	flush();
	setAddresss(0x5555);
	setData(0x20);
	enableEEPROM();
 370:	0e 94 da 00 	call	0x1b4	; 0x1b4 <_Z12enableEEPROMv>
	enableWrite();
 374:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Z11enableWritev>
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	9f e8       	ldi	r25, 0x8F	; 143
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <_Z25disableSoftwareProtectionv+0xda>
 380:	00 c0       	rjmp	.+0      	; 0x382 <_Z25disableSoftwareProtectionv+0xe0>
 382:	00 00       	nop
	//_delay_ms(1);
	writeData(0x20, 0x5555);
	//_delay_ms(1);
	//_delay_ms(1);
	*/
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	08 95       	ret

0000038c <_Z10USART_initv>:

#include "FIRMWARE.h"

//* Initialize USART */
void USART_init(void){
	UBRRH = (uint8_t)(BAUD_SCALLER>>8);
 38c:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)(BAUD_SCALLER);
 38e:	87 e1       	ldi	r24, 0x17	; 23
 390:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
 392:	88 e1       	ldi	r24, 0x18	; 24
 394:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<UCSZ0)|(1<<UCSZ1)|(1<<URSEL);
 396:	86 e8       	ldi	r24, 0x86	; 134
 398:	80 bd       	out	0x20, r24	; 32
 39a:	08 95       	ret

0000039c <_Z13USART_receivev>:
}

unsigned char USART_receive(void){
	while(!(UCSRA & (1<<RXC)));
 39c:	5f 9b       	sbis	0x0b, 7	; 11
 39e:	fe cf       	rjmp	.-4      	; 0x39c <_Z13USART_receivev>
	return UDR;
 3a0:	8c b1       	in	r24, 0x0c	; 12
}
 3a2:	08 95       	ret

000003a4 <_Z10USART_sendh>:

void USART_send( unsigned char data){
	while(!(UCSRA & (1<<UDRE)));
 3a4:	5d 9b       	sbis	0x0b, 5	; 11
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <_Z10USART_sendh>
	UDR = data;
 3a8:	8c b9       	out	0x0c, r24	; 12
 3aa:	08 95       	ret

000003ac <_Z11USART_printPc>:
	USART_print(snum);
	
	return (uint8_t)a;
}

void USART_print(char * str){
 3ac:	cf 93       	push	r28
 3ae:	df 93       	push	r29
 3b0:	ec 01       	movw	r28, r24
	while(*str != 0){
 3b2:	88 81       	ld	r24, Y
 3b4:	88 23       	and	r24, r24
 3b6:	31 f0       	breq	.+12     	; 0x3c4 <_Z11USART_printPc+0x18>
 3b8:	21 96       	adiw	r28, 0x01	; 1
		USART_send(*str);
 3ba:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_Z10USART_sendh>
	
	return (uint8_t)a;
}

void USART_print(char * str){
	while(*str != 0){
 3be:	89 91       	ld	r24, Y+
 3c0:	81 11       	cpse	r24, r1
 3c2:	fb cf       	rjmp	.-10     	; 0x3ba <_Z11USART_printPc+0xe>
		USART_send(*str);
		str++;
	}	
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <__itoa_ncheck>:
 3ca:	bb 27       	eor	r27, r27
 3cc:	4a 30       	cpi	r20, 0x0A	; 10
 3ce:	31 f4       	brne	.+12     	; 0x3dc <__itoa_ncheck+0x12>
 3d0:	99 23       	and	r25, r25
 3d2:	22 f4       	brpl	.+8      	; 0x3dc <__itoa_ncheck+0x12>
 3d4:	bd e2       	ldi	r27, 0x2D	; 45
 3d6:	90 95       	com	r25
 3d8:	81 95       	neg	r24
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__utoa_common>

000003e0 <__utoa_ncheck>:
 3e0:	bb 27       	eor	r27, r27

000003e2 <__utoa_common>:
 3e2:	fb 01       	movw	r30, r22
 3e4:	55 27       	eor	r21, r21
 3e6:	aa 27       	eor	r26, r26
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	aa 1f       	adc	r26, r26
 3ee:	a4 17       	cp	r26, r20
 3f0:	10 f0       	brcs	.+4      	; 0x3f6 <__utoa_common+0x14>
 3f2:	a4 1b       	sub	r26, r20
 3f4:	83 95       	inc	r24
 3f6:	50 51       	subi	r21, 0x10	; 16
 3f8:	b9 f7       	brne	.-18     	; 0x3e8 <__utoa_common+0x6>
 3fa:	a0 5d       	subi	r26, 0xD0	; 208
 3fc:	aa 33       	cpi	r26, 0x3A	; 58
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	a9 5d       	subi	r26, 0xD9	; 217
 402:	a1 93       	st	Z+, r26
 404:	00 97       	sbiw	r24, 0x00	; 0
 406:	79 f7       	brne	.-34     	; 0x3e6 <__utoa_common+0x4>
 408:	b1 11       	cpse	r27, r1
 40a:	b1 93       	st	Z+, r27
 40c:	11 92       	st	Z+, r1
 40e:	cb 01       	movw	r24, r22
 410:	0c 94 0a 02 	jmp	0x414	; 0x414 <strrev>

00000414 <strrev>:
 414:	dc 01       	movw	r26, r24
 416:	fc 01       	movw	r30, r24
 418:	67 2f       	mov	r22, r23
 41a:	71 91       	ld	r23, Z+
 41c:	77 23       	and	r23, r23
 41e:	e1 f7       	brne	.-8      	; 0x418 <strrev+0x4>
 420:	32 97       	sbiw	r30, 0x02	; 2
 422:	04 c0       	rjmp	.+8      	; 0x42c <strrev+0x18>
 424:	7c 91       	ld	r23, X
 426:	6d 93       	st	X+, r22
 428:	70 83       	st	Z, r23
 42a:	62 91       	ld	r22, -Z
 42c:	ae 17       	cp	r26, r30
 42e:	bf 07       	cpc	r27, r31
 430:	c8 f3       	brcs	.-14     	; 0x424 <strrev+0x10>
 432:	08 95       	ret

00000434 <_exit>:
 434:	f8 94       	cli

00000436 <__stop_program>:
 436:	ff cf       	rjmp	.-2      	; 0x436 <__stop_program>
